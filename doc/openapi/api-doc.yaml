openapi: 3.0.0
paths:
  /hello/string:
    get:
      operationId: HelloController_getHelloStringRest
      summary: Get Hello String
      parameters: []
      responses:
        "200":
          description: Hello String
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/HelloStringResponseDTO"
        "500":
          description: Internal Server Error
          content:
            application/json: {}
      tags: &a1
        - Hello
  /hello/json:
    get:
      operationId: HelloController_getHelloJsonRest
      summary: Get Hello JSON
      parameters: []
      responses:
        "200":
          description: Hello JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloJsonResponseDTO"
        "500":
          description: Internal Server Error
          content:
            application/json: {}
      tags: *a1
  /health/live:
    get:
      operationId: HealthController_isALive
      summary: Check if the service is alive
      parameters:
        - name: service
          required: false
          in: query
          description: The service to check
          schema:
            enum:
              - cache
              - database
              - kafka
            type: string
      responses:
        "200":
          description: The service is alive.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
        "503":
          description: The service is not alive.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
      tags: &a2
        - Health
  /health/ready:
    get:
      operationId: HealthController_isReady
      summary: Check if the service is ready
      parameters:
        - name: service
          required: false
          in: query
          description: The service to check
          schema:
            enum:
              - cache
              - database
              - kafka
            type: string
      responses:
        "200":
          description: The service is ready.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
        "503":
          description: The service is not ready.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
      tags: *a2
  /health/healthy:
    get:
      operationId: HealthController_isHealthy
      summary: Check if the service is healthy
      parameters:
        - name: service
          required: false
          in: query
          description: The service to check
          schema:
            enum:
              - cache
              - database
              - kafka
            type: string
      responses:
        "200":
          description: The service is healthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
        "503":
          description: The service is not healthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponseDTO"
      tags: *a2
  /auth/register:
    post:
      operationId: AuthController_register
      summary: Register a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDTO"
      responses:
        "201":
          description: The user has been successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationResponseDTO"
        "400":
          description: Bad Request
      tags: &a3
        - Authentication
  /auth/login:
    post:
      operationId: AuthController_login
      summary: Login a user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDTO"
      responses:
        "200":
          description: The user has been successfully logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDTO"
        "400":
          description: Bad Request
      tags: *a3
  /auth/logout:
    get:
      operationId: AuthController_logout
      summary: Logout a user
      parameters: []
      responses:
        "200":
          description: The user has been successfully logged out.
        "401":
          description: Unauthorized
      tags: *a3
      security:
        - bearer: []
  /auth/profile:
    get:
      operationId: AuthController_getProfile
      summary: Get the profile of the logged in user
      parameters: []
      responses:
        "200":
          description: The profile of the logged in user.
        "401":
          description: Unauthorized
      tags: *a3
      security:
        - bearer: []
  /users/ids-and-uuids:
    get:
      operationId: UserController_listUserIdsAndUUIDs
      summary: List all user ids and uuids
      parameters: []
      responses:
        "200":
          description: The user ids and uuids have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserIdUuidDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: &a4
        - User
  /users:
    get:
      operationId: UserController_listUsers
      summary: List all users
      parameters: []
      responses:
        "200":
          description: The users have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a4
    post:
      operationId: UserController_createUser
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDTO"
      responses:
        "201":
          description: The user has been successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a4
  /users/metadata:
    get:
      operationId: UserController_listUsersWithMetadata
      summary: List all users with metadata
      parameters: []
      responses:
        "200":
          description: The users with metadata have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a4
  /users/content:
    get:
      operationId: UserController_listUsersWithContent
      summary: List all users with content
      parameters: []
      responses:
        "200":
          description: The users with content have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserContentResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a4
  /users/{uuid}:
    get:
      operationId: UserController_getUser
      summary: Get a user by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      responses:
        "200":
          description: The user has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
    put:
      operationId: UserController_updateUser
      summary: Update a user by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDTO"
      responses:
        "200":
          description: The user has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
    delete:
      operationId: UserController_deleteUser
      summary: Delete a user by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      responses:
        "200":
          description: The user has been successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
  /users/ID/{ID}:
    get:
      operationId: UserController_getUserByID
      summary: Get a user by ID
      parameters:
        - name: ID
          required: true
          in: path
          description: The user ID
          schema:
            type: string
      responses:
        "200":
          description: The user has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
  /users/name/{name}:
    get:
      operationId: UserController_getUserByName
      summary: Get a user by name
      parameters:
        - name: name
          required: true
          in: path
          description: The user name
          schema:
            type: string
      responses:
        "200":
          description: The user has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
  /users/email/{email}:
    get:
      operationId: UserController_getUserByEmail
      summary: Get a user by email
      parameters:
        - name: email
          required: true
          in: path
          description: The user email
          schema:
            type: string
      responses:
        "200":
          description: The user has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
      tags: *a4
  /users/{uuid}/metadata:
    put:
      operationId: UserController_updateUserMetadata
      summary: Update a user metadata by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserMetadataRequestDTO"
      responses:
        "200":
          description: The user metadata has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User metadata not found.
        "500":
          description: Internal server error.
      tags: *a4
    get:
      operationId: UserController_getUserMetadata
      summary: Get a user metadata by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      responses:
        "200":
          description: The user metadata has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User metadata not found.
        "500":
          description: Internal server error.
      tags: *a4
  /users/{uuid}/content:
    put:
      operationId: UserController_updateUserContent
      summary: Update a user content by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserContentRequestDTO"
      responses:
        "200":
          description: The user content has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContentResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User content not found.
        "500":
          description: Internal server error.
      tags: *a4
    get:
      operationId: UserController_getUserContent
      summary: Get a user content by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The user uuid
          schema:
            type: string
      responses:
        "200":
          description: The user content has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserContentResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: User content not found.
        "500":
          description: Internal server error.
      tags: *a4
  /teams/ids-and-uuids:
    get:
      operationId: TeamController_listTeamIdsAndUUIDs
      summary: List all team ids and uuids
      parameters: []
      responses:
        "200":
          description: The team ids and uuids have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamIdUuidDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: &a5
        - Team
  /teams:
    get:
      operationId: TeamController_listTeams
      summary: List all teams
      parameters: []
      responses:
        "200":
          description: The teams have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a5
    post:
      operationId: TeamController_createTeam
      summary: Create a new team
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequestDTO"
      responses:
        "201":
          description: The team has been successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/metadata:
    get:
      operationId: TeamController_listTeamsWithMetadata
      summary: List all teams with metadata
      parameters: []
      responses:
        "200":
          description: The teams with metadata have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/content:
    get:
      operationId: TeamController_listTeamsWithContent
      summary: List all teams with content
      parameters: []
      responses:
        "200":
          description: The teams with content have been successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamContentResponseDTO"
        "401":
          description: Unauthorized.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/{uuid}:
    get:
      operationId: TeamController_getTeam
      summary: Get a team by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      responses:
        "200":
          description: The team has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
    put:
      operationId: TeamController_updateTeam
      summary: Update a team by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamRequestDTO"
      responses:
        "200":
          description: The team has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
    delete:
      operationId: TeamController_deleteTeam
      summary: Delete a team by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      responses:
        "200":
          description: The team has been successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/ID/{ID}:
    get:
      operationId: TeamController_getTeamByID
      summary: Get a team by ID
      parameters:
        - name: ID
          required: true
          in: path
          description: The team ID
          schema:
            type: string
      responses:
        "200":
          description: The team has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/name/{name}:
    get:
      operationId: TeamController_getTeamByName
      summary: Get a team by name
      parameters:
        - name: name
          required: true
          in: path
          description: The team name
          schema:
            type: string
      responses:
        "200":
          description: The team has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/email/{email}:
    get:
      operationId: TeamController_getTeamByEmail
      summary: Get a team by email
      parameters:
        - name: email
          required: true
          in: path
          description: The team email
          schema:
            type: string
      responses:
        "200":
          description: The team has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team not found.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/{uuid}/metadata:
    put:
      operationId: TeamController_updateTeamMetadata
      summary: Update a team metadata by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamMetadataRequestDTO"
      responses:
        "200":
          description: The team metadata has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team metadata not found.
        "500":
          description: Internal server error.
      tags: *a5
    get:
      operationId: TeamController_getTeamMetadata
      summary: Get a team metadata by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      responses:
        "200":
          description: The team metadata has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamMetadataResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team metadata not found.
        "500":
          description: Internal server error.
      tags: *a5
  /teams/{uuid}/content:
    put:
      operationId: TeamController_updateTeamContent
      summary: Update a team content by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamContentRequestDTO"
      responses:
        "200":
          description: The team content has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamContentResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team content not found.
        "500":
          description: Internal server error.
      tags: *a5
    get:
      operationId: TeamController_getTeamContent
      summary: Get a team content by uuid
      parameters:
        - name: uuid
          required: true
          in: path
          description: The team uuid
          schema:
            type: string
      responses:
        "200":
          description: The team content has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamContentResponseDTO"
        "401":
          description: Unauthorized.
        "404":
          description: Team content not found.
        "500":
          description: Internal server error.
      tags: *a5
info:
  title: HTTPS API
  description: HTTPS API documentation
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    HelloStringResponseDTO:
      type: object
      properties: {}
    DataDTO:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    HelloJsonResponseDTO:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DataDTO"
    HealthResponseDTO:
      type: object
      properties:
        status:
          type: string
          example: SERVING
        message:
          type: string
          example: OK
      required:
        - status
        - message
    CommonDateDTO:
      type: object
      properties:
        createdAt:
          format: date-time
          type: string
          description: The date when the task was created.
          example: 2023-08-15T12:00:00Z
        createdBy:
          type: string
          description: The name of the user who created the task.
          example: john.doe
        updatedAt:
          format: date-time
          type: string
          description: The date when the task was updated.
          example: 2023-08-15T12:00:00Z
        updatedBy:
          type: string
          description: The name of the user who updated the task.
          example: john.doe
        startedAt:
          format: date-time
          type: string
          description: The date when the task was started.
          example: 2023-08-15T12:00:00Z
        startedBy:
          type: string
          description: The name of the user who started the task.
          example: john.doe
        startDate:
          format: date-time
          type: string
          description: The date when the task should start.
          example: 2023-08-15T12:00:00Z
        endDate:
          format: date-time
          type: string
          description: The date when the task should complete
          example: 2023-08-15T12:00:00Z
        completedAt:
          format: date-time
          type: string
          description: The date when the task was completed.
          example: 2023-08-15T12:00:00Z
        completedBy:
          type: string
          description: The name of the user who completed the task.
          example: john.doe
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
        - startedAt
        - startedBy
        - startDate
        - endDate
        - completedAt
        - completedBy
    UserMetadataDTO:
      type: object
      properties:
        name:
          type: string
          description: Name of the User Metadata.
          example: John Doe
        dates:
          description: Dates related to the User Metadata.
          allOf:
            - $ref: "#/components/schemas/CommonDateDTO"
      required:
        - name
        - dates
    UserContentDTO:
      type: object
      properties:
        email:
          type: string
          description: Email is Unique identifier in the format "john.doe@mail.com".
          example: e.g. john.doe@mail.com
        phone:
          type: string
          description: Phone is Unique identifier in the format "0912-345-678".
          example: e.g. 0912-345-678
        firstName:
          type: string
          description: User first name.
          example: John
        lastName:
          type: string
          description: User last name.
          example: Doe
        projectRoles:
          description: Project roles is a type of PROJECT_ROLES_TYPES
          example: []
          default: PROJECT_ROLE_TYPES_UNSPECIFIED
          type: array
          items:
            type: string
        scrumRoles:
          description: Scrum roles is a type of SCRUM_ROLES_TYPES
          example:
            - SCRUM_ROLE_TYPES_UNSPECIFIED
            - SCRUM_ROLE_TYPES_PO
            - SCRUM_ROLE_TYPES_SM
            - SCRUM_ROLE_TYPES_MEMBER
            - SCRUM_ROLE_TYPES_O
            - UNRECOGNIZED
          default: SCRUM_ROLE_TYPES_UNSPECIFIED
          type: array
          items:
            type: string
        password:
          type: string
          description: Password Must include at least one uppercase letter, one lowercase
            letter, one digit, and one special character in the format
            "P@ssw0rd!234".
          example: e.g. P@ssw0rd!234
      required:
        - email
        - phone
        - firstName
        - lastName
        - projectRoles
        - scrumRoles
        - password
    CreateUserRequestDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for CreateUserRequestDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  CreateUserRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          description: Metadata of the user.
          allOf:
            - $ref: "#/components/schemas/UserMetadataDTO"
        content:
          description: Content of the user.
          allOf:
            - $ref: "#/components/schemas/UserContentDTO"
      required:
        - ID
        - UUID
        - metadata
        - content
    RegistrationResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for RegistrationResponseDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  RegistrationResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        email:
          type: string
          description: Email is Unique identifier in the format "john.doe@mail.com". for
            RegistrationResponseDTO
          example: e.g. john.doe@mail.com
      required:
        - ID
        - UUID
        - email
    LoginRequestDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for LoginRequestDTO
          example: john.doe
        email:
          type: string
          description: Email is Unique identifier in the format "john.doe@mail.com".
          example: e.g. john.doe@mail.com
        password:
          type: string
          description: Password Must include at least one uppercase letter, one lowercase
            letter, one digit, and one special character in the format
            "P@ssw0rd!234".
          example: e.g. P@ssw0rd!234
      required:
        - ID
        - email
        - password
    LoginResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      required:
        - token
    UserIdUuidDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for UserIdUuidDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UserIdUuidDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
      required:
        - ID
        - UUID
    UserResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for UserResponseDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UserResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/UserMetadataDTO"
        content:
          $ref: "#/components/schemas/UserContentDTO"
      required:
        - ID
        - UUID
        - metadata
        - content
    UserMetadataResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for UserMetadataResponseDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UserMetadataResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/UserMetadataDTO"
      required:
        - ID
        - UUID
        - metadata
    UserContentResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for UserContentResponseDTO
          example: john.doe
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UserContentResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        content:
          $ref: "#/components/schemas/UserContentDTO"
      required:
        - ID
        - UUID
        - content
    UpdateUserRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UpdateUserRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/UserMetadataDTO"
        content:
          $ref: "#/components/schemas/UserContentDTO"
      required:
        - UUID
        - metadata
        - content
    UpdateUserMetadataRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000"
            for  UpdateUserMetadataRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/UserMetadataDTO"
      required:
        - UUID
        - metadata
    UpdateUserContentRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000"
            for  UpdateUserContentRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        content:
          $ref: "#/components/schemas/UserContentDTO"
      required:
        - UUID
        - content
    TeamIdUuidDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for TeamIdUuidDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  TeamIdUuidDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
      required:
        - ID
        - UUID
    TeamMetadataDTO:
      type: object
      properties:
        name:
          type: string
          description: Name of the team metadata.
          example: Development Team
        dates:
          description: Dates related to the team metadata.
          allOf:
            - $ref: "#/components/schemas/CommonDateDTO"
      required:
        - name
        - dates
    IdUuidDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for IdUuidDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  IdUuidDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
      required:
        - ID
        - UUID
    TeamContentDTO:
      type: object
      properties:
        email:
          type: string
          description: Email is Unique identifier in the format "john.doe@mail.com".
          example: e.g. john.doe@mail.com
        members:
          description: IdUuidDTO of team members in the Team
          example:
            - ID: abc.xyz
              UUID: 00000000-0000-0000-0000-000000000000
          type: array
          items:
            $ref: "#/components/schemas/IdUuidDTO"
        productOwner:
          description: ID and UUID of the user who is the Product Owner of the Scrum Team
            (UUID)
          example: '{"ID":"john.doe","UUID":"00000000-0000-0000-0000-000000000001"}'
          allOf:
            - $ref: "#/components/schemas/IdUuidDTO"
        scrumMaster:
          description: ID and UUID of the user who is the Scrum Master of the Scrum Team
            (UUID)
          example: '{"ID":"jane.doe","UUID":"00000000-0000-0000-0000-000000000002"}'
          allOf:
            - $ref: "#/components/schemas/IdUuidDTO"
      required:
        - email
        - members
        - productOwner
        - scrumMaster
    TeamResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for TeamResponseDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  TeamResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/TeamMetadataDTO"
        content:
          $ref: "#/components/schemas/TeamContentDTO"
      required:
        - ID
        - UUID
        - metadata
        - content
    TeamMetadataResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for TeamMetadataResponseDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  TeamMetadataResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/TeamMetadataDTO"
      required:
        - ID
        - UUID
        - metadata
    TeamContentResponseDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for TeamContentResponseDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  TeamContentResponseDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        content:
          $ref: "#/components/schemas/TeamContentDTO"
      required:
        - ID
        - UUID
        - content
    CreateTeamRequestDTO:
      type: object
      properties:
        ID:
          type: string
          description: ID is Unique identifier for CreateTeamRequestDTO
          example: abc.xyz
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  CreateTeamRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          description: Metadata of the team.
          allOf:
            - $ref: "#/components/schemas/TeamMetadataDTO"
        content:
          description: Content of the team.
          allOf:
            - $ref: "#/components/schemas/TeamContentDTO"
      required:
        - ID
        - UUID
        - metadata
        - content
    UpdateTeamRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000" for  UpdateTeamRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/TeamMetadataDTO"
        content:
          $ref: "#/components/schemas/TeamContentDTO"
      required:
        - UUID
        - metadata
        - content
    UpdateTeamMetadataRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000"
            for  UpdateTeamMetadataRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        metadata:
          $ref: "#/components/schemas/TeamMetadataDTO"
      required:
        - UUID
        - metadata
    UpdateTeamContentRequestDTO:
      type: object
      properties:
        UUID:
          type: string
          description: UUID is Unique identifier in the format
            "00000000-0000-0000-0000-000000000000"
            for  UpdateTeamContentRequestDTO
          example: e.g. 00000000-0000-0000-0000-000000000000
        content:
          $ref: "#/components/schemas/TeamContentDTO"
      required:
        - UUID
        - content
